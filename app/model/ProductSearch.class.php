<?php
namespace app\model;

use system\engine\AbstractModel;

/**
 * Product search model
 * Searches and filters database results
 *
 * @author Bill
 *        
 */
class ProductSearch extends AbstractModel
{

    /**
     * Placeholder for query sorting(order by) string
     *
     * @var string
     */
    public $sort;

    /**
     * Placeholder for attribute where string
     *
     * @var string
     */
    private $whereAttributeClause;

    /**
     * Placeholder for price where clause
     *
     * @var string
     */
    private $wherePriceClause;

    /**
     * Placeholder for product type where clause
     *
     * @var string
     */
    private $whereTypeClause;

    /**
     * Additional where clause to remove results when sorting by age
     *
     * @var string
     */
    private $whereAdditionalClause;

    /**
     * Search term to look for
     *
     * @var string
     */
    private $whereSearchClause;

    /**
     * Constructor
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Retrieve products from the database.
     * The where clause is generated by
     * -- ProductSearch::setTypeFilter
     * -- ProductSearch::setAttributeFilter
     * -- ProductSearch::setPriceFilter
     * Order by is set from
     * -- ProductSearch::setSort
     * Attribute searches generate a ProductSearch::whereAdditionalClause
     *
     * @return array
     */
    public function getProducts(): Array
    {
        $query = "SELECT SQL_CALC_FOUND_ROWS
                    p.product_name,p.product_type,p.product_price,
                      (SELECT attribute_value               
                        FROM
                            petstore_db01.psa_attributes a
                        WHERE 
                            a.product_id = p.product_id AND
                            LOWER(a.attribute_name) = 'age'
                        ) AS age,                      
                      (SELECT attribute_value                 
                        FROM
                            petstore_db01.psa_attributes a1
                        WHERE 
                            a1.product_id = p.product_id AND
                            LOWER(a1.attribute_name) = 'lifespan'
                        ) AS lifespan, 

                    (SELECT 
                            GROUP_CONCAT(concat(ifnull(attribute_name,'NULL'),':',ifnull(attribute_value,'NULL')),';' 
                              
                                    SEPARATOR '|'
                                ) as attributes
                          
                        FROM
                            petstore_db01.psa_attributes a3
                       WHERE a3.product_id = p.product_id
                        ) AS attributes
                FROM
                    petstore_db01.psa_products p
                    LEFT JOIN
                    petstore_db01.psa_attributes ptav ON ptav.product_id = p.product_id
            WHERE p.product_id !=''
            $this->whereAttributeClause
            $this->wherePriceClause
            $this->whereTypeClause
            $this->whereAdditionalClause
            $this->whereSearchClause
            group by p.product_id  
            $this->sort ;";
        /* change to 1==1 to view query */
        if (1 == 0) {
            echo $query;
        }
        $results = $this->db->getResults($query);
        return ($results);
    }

    /**
     * Set attribute filter
     * This generates a where clause
     *
     * @param string $attributefilter
     */
    public function setAttributeFilter(array $attributefilter)
    {
        if (! empty($attributefilter) && is_array($attributefilter)) {
            $this->whereAttributeClause = " AND LOWER(ptav.attribute_value) LIKE '%{$attributefilter['value']}%' ";
            $this->whereAttributeClause .= " AND LOWER(ptav.attribute_name) LIKE '%{$attributefilter['name']}%' ";
        }
    }

    /**
     * Set price filter for searches
     * This generates a where clause
     *
     * @param string $priceFilter
     */
    public function setPriceFilter(string $priceFilter)
    {
        if (! empty($priceFilter)) {
            $this->wherePriceClause = " AND p.product_price = '$priceFilter' ";
        }
    }

    /**
     * Set product type for searches.
     * This generates a where clause
     *
     * @param string $typeFilter
     */
    public function setTypeFilter(string $typeFilter)
    {
        if (! empty($typeFilter)) {
            $this->whereTypeClause = " AND LOWER(p.product_type) LIKE '%$typeFilter%' ";
        }
    }

    /**
     * Set product type for searches.
     * This generates a where clause
     *
     * @param string $typeFilter
     */
    public function setSearchString(string $searchString)
    {
        if (! empty($searchString)) {
            
            $searchStringArray = explode(" ", $searchString);
            
            if (! empty($searchStringArray[0])) {
                foreach ($searchStringArray as $k => $v) {
                    $this->whereSearchClause .= " AND (SOUNDEX(p.product_type) = SOUNDEX('$v')
            OR SOUNDEX(ptav.attribute_value) = SOUNDEX('$v') 
            OR SOUNDEX(ptav.attribute_name) = SOUNDEX('$v') )  ";
                }
            }
            
            $searchStringComb = implode("','",$searchStringArray );
            $this->whereSearchClause .= " OR ptav.attribute_value IN ('$searchStringComb') ";
            
            
            // $this->whereSearchClause = " AND (SOUNDEX(p.product_type) = SOUNDEX('$searchString')
            // OR SOUNDEX(ptav.attribute_value) = SOUNDEX('$searchString') ) ";
            /*
             * $this->whereSearchClause = " AND (LOWER(p.product_type) LIKE '%$searchString%'
             * OR LOWER(ptav.attribute_value) LIKE '%$searchString%') ";
             */
        }
    }

    /**
     * Set the query order by clause
     *
     * @param string $sorting
     */
    public function setSort(string $sorting)
    {
        switch ($sorting) {
            case 'nameasc':
                $this->sort = ' order by p.product_name asc';
                break;
            case 'namedesc':
                $this->sort = ' order by p.product_name desc';
                break;
            case 'typeasc':
                $this->sort = ' order by p.product_type asc ';
                break;
            case 'typedesc':
                $this->sort = ' order by p.product_type desc ';
                break;
            case 'priceasc':
                $this->sort = ' order by p.product_price asc ';
                break;
            case 'pricedesc':
                $this->sort = ' order by p.product_price desc ';
                break;
            case 'ageasc':
                $this->sort = ' order by CAST(age as unsigned) asc ';
                $this->whereAdditionalClause = " AND (ptav.attribute_name = 'age' and attribute_value !='') ";
                break;
            case 'agedesc':
                $this->sort = ' order by CAST(age as unsigned) desc ';
                $this->whereAdditionalClause = " AND (ptav.attribute_name = 'age' and attribute_value !='') ";
                break;
            case 'lifespanasc':
                $this->sort = ' order by CAST(lifespan as unsigned) asc ';
                $this->whereAdditionalClause = " AND (ptav.attribute_name = 'lifespan' and attribute_value !='') ";
                break;
            case 'lifespandesc':
                $this->sort = ' order by CAST(lifespan as unsigned)  desc ';
                $this->whereAdditionalClause = " AND (ptav.attribute_name = 'lifespan' and attribute_value !='') ";
                break;
            default:
                $this->sort = '';
                break;
        }
    }

    /**
     * Destructor
     */
    function __destruct()
    {
        parent::__destruct();
    }
}